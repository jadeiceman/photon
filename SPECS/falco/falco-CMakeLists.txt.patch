diff --git a/CMakeLists.txt b/CMakeLists.txt
index bc22d70..4e838b1 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -387,7 +387,12 @@ if(NOT USE_BUNDLED_LIBYAML)
 	if(LIBYAML_LIB)
 		message(STATUS "Found libyaml: lib: ${LIBYAML_LIB}")
 	else()
-		message(FATAL_ERROR "Couldn't find system libyaml")
+		find_library(LIBYAML_LIB NAMES libyaml.so)
+		if(LIBYAML_LIB)
+			message(STATUS "Found libyaml: lib: ${LIBYAML_LIB}")
+		else()
+			message(FATAL_ERROR "Couldn't find system libyaml")
+		endif()
 	endif()
 else()
 	find_path(AUTORECONF_BIN NAMES autoreconf)
@@ -435,14 +440,20 @@ else()
 	if(USE_BUNDLED_LIBYAML)
 		list(APPEND LYAML_DEPENDENCIES "libyaml")
 	endif()
+	if(USE_BUNDLED_LIBYAML)
+		set(CONFIGURE_LYAML ./configure --enable-static LIBS=-L../../../libyaml-prefix/src/libyaml/src/.libs CFLAGS=-I../../../libyaml-prefix/src/libyaml/include CPPFLAGS=-I../../../libyaml-prefix/src/libyaml/include LUA_INCLUDE=-I../../../luajit-prefix/src/luajit/src LUA=../../../luajit-prefix/src/luajit/src/luajit)
+	else()
+		set(CONFIGURE_LYAML ./configure --enable-static LUA_INCLUDE=-I${PROJECT_BINARY_DIR}/luajit-prefix/src/luajit/src LUA=${PROJECT_BINARY_DIR}/luajit-prefix/src/luajit/src/luajit)
+	endif()
+
 	ExternalProject_Add(lyaml
 		DEPENDS ${LYAML_DEPENDENCIES}
 		URL "http://s3.amazonaws.com/download.draios.com/dependencies/lyaml-release-v6.0.tar.gz"
                 URL_MD5 "dc3494689a0dce7cf44e7a99c72b1f30"
                 BUILD_COMMAND ${CMD_MAKE}
                 BUILD_IN_SOURCE 1
-		CONFIGURE_COMMAND ./configure --enable-static LIBS=-L../../../libyaml-prefix/src/libyaml/src/.libs CFLAGS=-I../../../libyaml-prefix/src/libyaml/include CPPFLAGS=-I../../../libyaml-prefix/src/libyaml/include LUA_INCLUDE=-I../../../luajit-prefix/src/luajit/src LUA=../../../luajit-prefix/src/luajit/src/luajit
-                INSTALL_COMMAND sh -c "cp -R ${PROJECT_BINARY_DIR}/lyaml-prefix/src/lyaml/lib/* ${PROJECT_SOURCE_DIR}/userspace/engine/lua")
+		CONFIGURE_COMMAND ${CONFIGURE_LYAML}
+		 INSTALL_COMMAND sh -c "cp -R ${PROJECT_BINARY_DIR}/lyaml-prefix/src/lyaml/lib/* ${PROJECT_SOURCE_DIR}/userspace/engine/lua")
 endif()
 
 option(USE_BUNDLED_TBB "Enable building of the bundled tbb" ${USE_BUNDLED_DEPS})
@@ -510,7 +521,13 @@ if(NOT USE_BUNDLED_CARES)
 	if(CARES_INCLUDE AND CARES_LIB)
 		message(STATUS "Found c-ares: include: ${CARES_INCLUDE}, lib: ${CARES_LIB}")
 	else()
-		message(FATAL_ERROR "Couldn't find system c-ares")
+		find_path(CARES_INCLUDE NAMES ares.h)
+		find_library(CARES_LIB NAMES libcares.so)
+		if(CARES_INCLUDE AND CARES_LIB)
+			message(STATUS "Found c-ares: include: ${CARES_INCLUDE}, lib: ${CARES_LIB}")
+		else()
+			message(FATAL_ERROR "Couldn't find system c-ares")
+		endif()
 	endif()
 else()
 	set(CARES_SRC "${PROJECT_BINARY_DIR}/c-ares-prefix/src/c-ares")
@@ -532,10 +549,17 @@ if(NOT USE_BUNDLED_PROTOBUF)
 	find_program(PROTOC NAMES protoc)
 	find_path(PROTOBUF_INCLUDE NAMES google/protobuf/message.h)
 	find_library(PROTOBUF_LIB NAMES libprotobuf.a)
-	if(PROTOC AND PROTOBUF_INCLUDE AND PROTOBUF_LIB)
-		message(STATUS "Found protobuf: compiler: ${PROTOC}, include: ${PROTOBUF_INCLUDE}, lib: ${PROTOBUF_LIB}")
-	else()
-		message(FATAL_ERROR "Couldn't find system protobuf")
+	if(PROTOC AND PROTOBUF_INCLUDE)
+		if(PROTOBUF_LIB)
+			message(STATUS "Found protobuf: compiler: ${PROTOC}, include: ${PROTOBUF_INCLUDE}, lib: ${PROTOBUF_LIB}")
+		else()
+			find_library(PROTOBUF_LIB NAMES libprotobuf.so)
+			if(PROTOBUF_LIB)
+				message(STATUS "Found protobuf: compiler: ${PROTOC}, include: ${PROTOBUF_INCLUDE}, lib: ${PROTOBUF_LIB}")
+			else()
+				message(FATAL_ERROR "Couldn't find system protobuf")
+			endif()
+		endif()
 	endif()
 else()
 	set(PROTOBUF_SRC "${PROJECT_BINARY_DIR}/protobuf-prefix/src/protobuf")
