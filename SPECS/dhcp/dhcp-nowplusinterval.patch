diff -up dhcp-4.2.3-P2/common/dispatch.c.nowplusinterval dhcp-4.2.3-P2/common/dispatch.c
--- dhcp-4.2.3-P2/common/dispatch.c.nowplusinterval	2012-02-15 14:58:27.902930829 +0100
+++ dhcp-4.2.3-P2/common/dispatch.c	2012-02-16 14:01:36.503430552 +0100
@@ -172,9 +172,9 @@ isclib_timer_callback(isc_task_t  *taskp
 	return;
 }
 
-/* maximum value for usec */
-#define USEC_MAX 1000000
-#define DHCP_SEC_MAX  0xFFFFFFFF
+#define NS_PER_US	1000		/*%< Nanoseconds per microsecond. */
+#define US_PER_S	1000000		/*%< Microseconds per second. */
+#define DHCP_SEC_MAX	0xFFFFFFFF	/*%< 2^^32-1 */
 
 void add_timeout (when, where, what, ref, unref)
 	struct timeval *when;
@@ -246,26 +246,40 @@ void add_timeout (when, where, what, ref
 	 * the working code use the same values.
 	 */
 
+	/*
+	 * We need to reduce (to 2^^32-1) the absolute time from an epoch
+	 * (i.e. value of when->tv_sec) and not the relative time (value of
+	 * sec variable).
+	 * In other words, we have to make sure that once the
+	 * isc_time_nowplusinterval() adds current time to the given relative
+	 * time the result will be less than 2^^32-1.
+	 */
+	if (when->tv_sec > DHCP_SEC_MAX) {
+		log_error("Timeout requested too large "
+			  "reducing to 2^^32-10");
+		/*
+		 * HACK: 9 is some magic number of seconds
+		 *       because some time goes by between the last call of gettimeofday()
+		 *       and the one in isc_time_nowplusinterval()
+		 *       I'm sure the ISC guys will figure out something better ;-)
+		 */
+		when->tv_sec = DHCP_SEC_MAX - 9;
+	}
 	sec  = when->tv_sec - cur_tv.tv_sec;
 	usec = when->tv_usec - cur_tv.tv_usec;
-	
+
 	if ((when->tv_usec != 0) && (usec < 0)) {
 		sec--;
-		usec += USEC_MAX;
+		usec += US_PER_S;
 	}
 
 	if (sec < 0) {
 		sec  = 0;
 		usec = 0;
-	} else if (sec > DHCP_SEC_MAX) {
-		log_error("Timeout requested too large "
-			  "reducing to 2^^32-1");
-		sec = DHCP_SEC_MAX;
-		usec = 0;
 	} else if (usec < 0) {
 		usec = 0;
-	} else if (usec >= USEC_MAX) {
-		usec = USEC_MAX - 1;
+	} else if (usec >= US_PER_S) {
+		usec = US_PER_S - 1;
 	}
 
 	/* 
@@ -273,7 +287,7 @@ void add_timeout (when, where, what, ref
 	 * here in case we want to compare timing information
 	 * for some reason, like debugging.
 	 */
-	q->when.tv_sec  = cur_tv.tv_sec + (sec & DHCP_SEC_MAX);
+	q->when.tv_sec  = cur_tv.tv_sec + sec;
 	q->when.tv_usec = usec;
 
 #if defined (TRACING)
@@ -324,9 +324,9 @@ void add_timeout (when, where, what, ref
 	q->next  = timeouts;
 	timeouts = q;
 
-	isc_interval_set(&interval, sec & DHCP_SEC_MAX, usec * 1000);
+	isc_interval_set(&interval, sec, usec * NS_PER_US);
 	status = isc_time_nowplusinterval(&expires, &interval);
 	if (status != ISC_R_SUCCESS) {
 		/*
 		 * The system time function isn't happy or returned
 		 * a value larger than isc_time_t can hold.
